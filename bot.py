import os
import torch
import logging
from transformers import AutoModelForSequenceClassification, AutoTokenizer
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CommandHandler, CallbackContext
from dotenv import load_dotenv
import mysql.connector


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
#load_dotenv()
TOKEN = os.getenv("TOKEN")

# –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
MODEL_PATH = "tetianamohorian/hate_speech_model"

db_config = {
    "host": "mysql",
    "user": "root",
    "password": "0674998280tanya",
    "database": "telegram_bot"
}

def save_violator(username, message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        query = "INSERT INTO violators (username, message) VALUES (%s, %s)"
        cursor.execute(query, (username, message))
        conn.commit()
        cursor.close()
        conn.close()
    except mysql.connector.Error as err:
        logging.error(f"–û—à–∏–±–∫–∞ MySQL: {err}")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("log.txt"),
        logging.StreamHandler()
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
tokenizer = AutoTokenizer.from_pretrained(MODEL_PATH)
model = AutoModelForSequenceClassification.from_pretrained(MODEL_PATH).to(device)

def classify_text(text):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    model.eval()
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding="max_length", max_length=128).to(device)

    with torch.no_grad():
        outputs = model(**inputs)

    logits = outputs.logits
    pred = torch.argmax(logits, dim=-1).item()

    return "üõë Nen√°vistn√° reƒç" if pred == 1 else "‚úÖ OK"

async def check_message(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –∏ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message_text = update.message.text
    result = classify_text(message_text)

    if result == "üõë Nen√°vistn√° reƒç":
        username = update.message.from_user.username or "unknown"
        await update.message.reply_text("‚ö†Ô∏è Upozornenie! Dodr≈æiavajte kult√∫ru komunik√°cie.")
        await update.message.delete()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫—Å–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫—Å–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        logging.warning(f"Toxick√° spr√°va od {update.message.from_user.username}: {message_text}")
        save_violator(username, message_text)

async def start(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    await update.message.reply_text("Ahoj! Sledujem kult√∫ru komunik√°cie v chate!")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()
